# -*- coding: utf-8 -*-
"""
Created on Wed Nov  8 18:30:10 2017

@author: Administrator
"""

import math


'''
图像平滑模板
'''
box3 = [
       [1/9,1/9,1/9],
       [1/9,1/9,1/9],
       [1/9,1/9,1/9]
      ]

box5 = [
       [1/25,1/25,1/25,1/25,1/25],
       [1/25,1/25,1/25,1/25,1/25],
       [1/25,1/25,1/25,1/25,1/25],
       [1/25,1/25,1/25,1/25,1/25],
       [1/25,1/25,1/25,1/25,1/25]
      ]

box7 = [
       [1/49,1/49,1/49,1/49,1/49,1/49,1/49],
       [1/49,1/49,1/49,1/49,1/49,1/49,1/49],
       [1/49,1/49,1/49,1/49,1/49,1/49,1/49],
       [1/49,1/49,1/49,1/49,1/49,1/49,1/49],
       [1/49,1/49,1/49,1/49,1/49,1/49,1/49],
       [1/49,1/49,1/49,1/49,1/49,1/49,1/49],
       [1/49,1/49,1/49,1/49,1/49,1/49,1/49]
      ]

average4 = [
        [0,1/5,0],
        [1/5,1/5,1/5],
        [0,1/5,0]
        ]

gauss = [
        [1/16,2/16,1/16],
        [2/16,4/16,2/16],
        [1/16,2/16,1/16]
        ]

weightedAverage = [
        [1/10,1/10,1/10],
        [1/10,2/10,1/10],
        [1/10,1/10,1/10]
        ]


'''
锐化
'''

'''
Prewitt算子是一种一阶微分算子的边缘检测，
利用像素点上下、左右邻点的灰度差，在边缘处达到极值检测边缘，去掉部分伪边缘，对噪声具有平滑作用 。
其原理是在图像空间利用两个方向模板与图像进行邻域卷积来完成的，
这两个方向模板一个检测水平边缘，一个检测垂直边缘。
'''
prewittx = [
        [-1,-1,-1],
        [0,0,0],
        [1,1,1]
        ]

prewitty = [
            [-1,0,1],
            [-1,0,1],
            [-1,0,1]
           ]


'''
其主要用于边缘检测，在技术上它是以离散型的差分算子，用来运算图像亮度函数的梯度的近似值
基于一阶导数的边缘检测算子，由于该算子中引入了类似局部平均的运算，因此对噪声具有平滑作用，能很好的消除噪声的影响。
Sobel算子对于像素的位置的影响做了加权，与Prewitt算子、Roberts算子相比因此效果更好。
缺点是Sobel算子并没有将图像的主题与背景严格地区分开来，
换言之就是Sobel算子并没有基于图像灰度进行处理，由于Sobel算子并没有严格地模拟人的视觉生理特征，
所以提取的图像轮廓有时并不能令人满意。
'''
sobelx = [
        [-1,-2,-1],
        [0,0,0],
        [1,2,1]
        ]

sobely = [
        [-1,0,1],
        [-2,0,2],
        [-1,0,1]
        ]
'''
Sobel算子另一种形式是(Isotropic Sobel)算子，加权平均算子，
权值反比于邻点与中心点的距离，当沿不同方向检测边缘时梯度幅度一致，
就是通常所说的各向同性Sobel(Isotropic Sobel)算子。
模板也有两个，一个是检测水平边沿的 ，另一个是检测垂直平边沿的 。
各向同性Sobel算子和普通Sobel算子相比，它的位置加权系数更为准确，
在检测不同方向的边沿时梯度的幅度一致。
'''
isotropicx = [
            [-1,-math.sqrt(2),-1],
            [0,0,0],
            [1,math.sqrt(2),1]
            ]

isotropicy = [
            [-1,0,1],
            [-math.sqrt(2),0,math.sqrt(2)],
            [-1,0,1]
            ]
'''
Laplace算子是一种各向同性算子，二阶微分算子，在只关心边缘的位置而不考虑其周围的象素灰度差值时比较合适。
Laplace算子对孤立象素的响应要比对边缘或线的响应要更强烈，因此只适用于无噪声图象。
存在噪声情况下，使用Laplacian算子检测边缘之前需要先进行低通滤波。
所以，通常的分割算法都是把Laplacian算子和平滑算子结合起来生成一个新的模板。
'''
lpls4 = [
        [0,1,0],
        [1,-4,1],
        [0,1,0]
        ]

lpls8 = [
         [1,1,1],
         [1,-8,1],
         [1,1,1]
         ]

